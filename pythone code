#!/usr/bin/python3

# Importing necessary modules
import math
import easysnmp
import sys
import time
from easysnmp import Session, snmp_get, snmp_walk

# Extracting agent/device details from command-line arguments
device_info = sys.argv[1]
ip_address, port, community = device_info.split(':')
sampling_frequency = float(sys.argv[2])
interval = 1 / sampling_frequency
num_samples = int(sys.argv[3])

oids = ['1.3.6.1.2.1.1.3.0'] + sys.argv[4:]

def snmp_polling():
    global initial_oid_values, last_poll_time

    # Establishing SNMP session
    session = Session(hostname=ip_address, remote_port=port, community=community, version=2, timeout=1, retries=1)
    response = session.get(oids)
    current_oid_values = []

    # Processing each response
    for i in range(1, len(response)):
        if response[i].value not in ('NOSUCHOBJECT', 'NOSUCHINSTANCE'):
            current_oid_values.append(int(response[i].value))

            if iteration != 0 and initial_oid_values:
                value_difference = int(current_oid_values[i-1]) - int(initial_oid_values[i-1])
                elapsed_time = round(current_time - last_poll_time, 1)
                rate = int(value_difference / elapsed_time)

                if rate < 0:
                    if response[i].snmp_type == 'COUNTER32':
                        value_difference += 2**32
                    elif response[i].snmp_type == 'COUNTER64':
                        value_difference += 2**64
                    print(f"{current_time}|{value_difference / elapsed_time}|")
                else:
                    print(f"{current_time}|{rate}|")

    initial_oid_values = current_oid_values
    last_poll_time = current_time

# Handling infinite and finite sampling cases
if num_samples == -1:
    iteration = 0
    initial_oid_values = []
    while True:
        current_time = time.time()
        snmp_polling()
        response_time = time.time()
        iteration += 1
        time.sleep(max(0, interval - (response_time - current_time)))
else:
    initial_oid_values = []
    for iteration in range(num_samples + 1):
        current_time = time.time()
        snmp_polling()
        response_time = time.time()
        time.sleep(max(0, interval - (response_time - current_time)))
